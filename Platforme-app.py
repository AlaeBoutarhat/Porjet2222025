
from PIL import Image, ImageDraw, ImageFont
import os
import shutil
import streamlit as st
import json
import subprocess
import numpy as np
from bert_score import BERTScorer
import random
import time
from deep_translator import GoogleTranslator
import requests
from fonction import get_best_reformulations,est_en_francais,traduire_en_anglais,segment_objects_with_prompting,compare_keywords_with_class,highlight_objects_in_image
from transformers import AutoModelForCausalLM, AutoTokenizer
from peft import PeftModel
import torch
from PIL import Image
import io
import zipfile

st.set_page_config(page_title="SegmaVision Pro Light", layout="wide")

# --- Initialisation de l'√©tat de la session ---
# Ce bloc garantit que toutes les variables existent d√®s le premier chargement de l'application.

# 1. Gestion de la navigation et des vues
if 'current_view' not in st.session_state:
    st.session_state.current_view = 'main'  # Peut √™tre 'main', 'about', 'prompt', 'enhancer'

# 2. Flux de la saisie de prompt
if 'user_prompt' not in st.session_state:
    st.session_state.user_prompt = ""
if 'user_prompt_english' not in st.session_state:
    st.session_state.user_prompt_english = ""
if 'user_prompt_original' not in st.session_state:
    st.session_state.user_prompt_original = ""
if 'prompt_submitted' not in st.session_state:
    st.session_state.prompt_submitted = False
if 'prompt_confirmed' not in st.session_state:
    st.session_state.prompt_confirmed = False
if 'prompt_error' not in st.session_state:
    st.session_state.prompt_error = False

# 3. Flux de l'am√©lioration de la prompt (Enhancer)
if 'enhance_mode' not in st.session_state:
    st.session_state.enhance_mode = False
if 'enhanced_prompts' not in st.session_state:
    st.session_state.enhanced_prompts = []
if 'selected_prompt_index' not in st.session_state:
    st.session_state.selected_prompt_index = -1  # -1 signifie aucune s√©lection
if 'enhance_time' not in st.session_state:
    st.session_state.enhance_time = ""

# 4. Flux de l'extraction et classification des mots-cl√©s
if 'keywords_extracted' not in st.session_state:
    st.session_state.keywords_extracted = False
if 'extracted_keywords' not in st.session_state:
    st.session_state.extracted_keywords = []
if 'keywords_classified' not in st.session_state:
    st.session_state.keywords_classified = False
if 'objets_existants' not in st.session_state:
    st.session_state.objets_existants = []
if 'objets_inexistants' not in st.session_state:
    st.session_state.objets_inexistants = []
if 'sous_classes' not in st.session_state:
    st.session_state.sous_classes = []
if 'extraction_time' not in st.session_state:
    st.session_state.extraction_time = ""

# 5. S√©lection de l'utilisateur pour le traitement
if 'selected_for_segmentation' not in st.session_state:
    st.session_state.selected_for_segmentation = []
if 'selected_for_finetuning' not in st.session_state:
    st.session_state.selected_for_finetuning = []
if 'selection_confirmed' not in st.session_state:
    st.session_state.selection_confirmed = False

# 6. Gestion des images et des r√©sultats de segmentation
if 'show_upload' not in st.session_state:
    st.session_state.show_upload = False
if 'saved_images_paths' not in st.session_state:
    st.session_state.saved_images_paths = []  # Liste des chemins des fichiers sauvegard√©s
if 'active_image_index' not in st.session_state:
    st.session_state.active_image_index = 0  # Index de l'image s√©lectionn√©e par l'utilisateur
if 'segmented_results' not in st.session_state:
    st.session_state.segmented_results = {} # L'image r√©sultat apr√®s segmentation
if 'segmentation_completed' not in st.session_state:
    st.session_state.segmentation_completed = False

if 'finetuning_class_mapping' not in st.session_state:
    st.session_state.finetuning_class_mapping = {}
if 'finetuning_all_labels' not in st.session_state:
    # Dictionnaire pour stocker les labels par image: {'path/to/img1': [labels], ...}
    st.session_state.finetuning_all_labels = {}
if 'finetuning_active_image_path' not in st.session_state:
    st.session_state.finetuning_active_image_path = None
if 'dataset_generated' not in st.session_state:
    st.session_state.dataset_generated = False


# Fonctions pour mettre √† jour l'√©tat

def show_about():
    st.session_state.current_view = 'about'

def show_prompt():
    st.session_state.current_view = 'prompt'
    st.session_state.prompt_submitted = False
    st.session_state.prompt_confirmed = False
    st.session_state.enhance_mode = False

def show_enhancer():
    if not st.session_state.user_prompt:
        st.session_state.current_view = 'prompt'
        st.session_state.prompt_error = True
    else:
        st.session_state.current_view = 'enhancer'
        enhance_prompt()

def submit_prompt():
    if st.session_state.user_prompt:
        st.session_state.prompt_submitted = True
        st.session_state.prompt_error = False
    else:
        st.session_state.prompt_error = True


def confirm_prompt():
    # V√©rifier si la prompt est en fran√ßais et la traduire si n√©cessaire
    if est_en_francais(st.session_state.user_prompt):
        with st.spinner("Traduction de la prompt en anglais..."):
            st.session_state.user_prompt_english = traduire_en_anglais(st.session_state.user_prompt)
            # Stocker la prompt originale pour l'affichage
            st.session_state.user_prompt_original = st.session_state.user_prompt
    else:
        # Si d√©j√† en anglais, utiliser telle quelle
        st.session_state.user_prompt_english = st.session_state.user_prompt
        st.session_state.user_prompt_original = st.session_state.user_prompt

    st.session_state.prompt_confirmed = True
    st.session_state.enhance_mode = False
    # R√©initialiser les mots-cl√©s extraits
    st.session_state.keywords_extracted = False
    st.session_state.extracted_keywords = []
    # R√©initialiser les classifications
    st.session_state.keywords_classified = False
    st.session_state.objets_existants = []
    st.session_state.objets_inexistants = []
    st.session_state.sous_classes = []

def start_enhance_mode():
    st.session_state.enhance_mode = True

def enhance_prompt():
    with st.spinner("üí¨ Am√©lioration de la prompt en cours..."):
        start_time = time.time()
        results = get_best_reformulations(st.session_state.user_prompt)
        end_time = time.time()

        if results:
            st.session_state.enhanced_prompts = results
            st.session_state.enhance_time = f"{end_time - start_time:.2f}"
            st.session_state.selected_prompt_index = -1  # R√©initialiser la s√©lection
            # R√©initialiser les mots-cl√©s extraits
            st.session_state.keywords_extracted = False
            st.session_state.extracted_keywords = []
            # R√©initialiser les classifications
            st.session_state.keywords_classified = False
            st.session_state.objets_existants = []
            st.session_state.objets_inexistants = []
            st.session_state.sous_classes = []
        else:
            st.session_state.enhanced_prompts = []

def select_enhanced_prompt(index):
    st.session_state.selected_prompt_index = index
    # R√©initialiser les mots-cl√©s extraits quand on change de prompt
    st.session_state.keywords_extracted = False
    st.session_state.extracted_keywords = []
    # R√©initialiser les classifications
    st.session_state.keywords_classified = False
    st.session_state.objets_existants = []
    st.session_state.objets_inexistants = []
    st.session_state.sous_classes = []

def confirm_selection():
    if st.session_state.selected_prompt_index >= 0:
        # Utiliser la version anglaise pour le traitement
        st.session_state.user_prompt_english = st.session_state.enhanced_prompts[st.session_state.selected_prompt_index][0]
        # Stocker la prompt originale en fran√ßais pour l'affichage
        st.session_state.user_prompt_original = st.session_state.user_prompt
        st.session_state.current_view = 'prompt'
        st.session_state.prompt_submitted = True
        st.session_state.prompt_confirmed = True  # Auto-confirmer la prompt s√©lectionn√©e
        # R√©initialiser les mots-cl√©s extraits
        st.session_state.keywords_extracted = False
        st.session_state.extracted_keywords = []
        # R√©initialiser les classifications
        st.session_state.keywords_classified = False
        st.session_state.objets_existants = []
        st.session_state.objets_inexistants = []
        st.session_state.sous_classes = []

# Nouvelle fonction pour r√©initialiser et revenir √† la saisie de prompt
def new_prompt():
    st.session_state.user_prompt = ""
    st.session_state.user_prompt_english = ""
    st.session_state.prompt_submitted = False
    st.session_state.prompt_confirmed = False
    st.session_state.enhance_mode = False
    st.session_state.current_view = 'prompt'
    # R√©initialiser les mots-cl√©s extraits
    st.session_state.keywords_extracted = False
    st.session_state.extracted_keywords = []
    # R√©initialiser les classifications
    st.session_state.keywords_classified = False
    st.session_state.objets_existants = []
    st.session_state.objets_inexistants = []
    st.session_state.sous_classes = []
          
    # AJOUTER LA R√âINITIALISATION DES S√âLECTIONS SP√âCIFIQUES
    st.session_state.selected_for_segmentation = []
    st.session_state.selected_for_finetuning = []
    st.session_state.selection_confirmed = False

    st.session_state.uploaded_image = None
    st.session_state.segmented_results = {}
    st.session_state.show_upload = False
    st.session_state.saved_image_path = None  # NOUVEAU: R√©initialiser le chemin sauvegard√©
    st.session_state.segmentation_completed = False
    
    

    

# Mise √† jour de la valeur de la prompt
def update_prompt(value):
    st.session_state.user_prompt = value
    st.session_state.prompt_error = False

# Fonction pour extraire les mots-cl√©s en utilisant le LLM
def extract_keywords():
    # Utiliser la prompt confirm√©e (en anglais)
    prompt_to_process = st.session_state.user_prompt_english
 

    with st.spinner("üîç Extraction des mots-cl√©s en cours..."):
        start_time = time.time()
        # Utiliser la fonction fournie pour l'extraction des mots-cl√©s
        extracted_objects = segment_objects_with_prompting(
            prompt_to_process,
            base_model_name="HuggingFaceH4/zephyr-7b-beta",
            lora_path="/teamspace/studios/this_studio/llm",
            max_new_tokens=128
        )
        end_time = time.time()

    # Mettre √† jour les variables d'√©tat
    st.session_state.extracted_keywords = extracted_objects
    st.session_state.keywords_extracted = True
    st.session_state.extraction_time = f"{end_time - start_time:.2f}"

    # Comparer avec les classes existantes
    classify_keywords()

    return extracted_objects


  
# Fonction pour classifier les mots-cl√©s extraits
def classify_keywords():
    if st.session_state.extracted_keywords:
        json_path = "/teamspace/studios/this_studio/classeadapter.json"
        with st.spinner("üîç Classification des mots-cl√©s en cours..."):
            objets_ok, objets_nok, sous_classes_list = compare_keywords_with_class( # Renomm√© pour √©viter conflit de nom
                st.session_state.extracted_keywords,
                json_path
            )

        # Mettre √† jour les variables d'√©tat avec les r√©sultats
        st.session_state.objets_existants = objets_ok
        st.session_state.objets_inexistants = objets_nok
        st.session_state.sous_classes = sous_classes_list # Utilisation de la variable renomm√©e
        st.session_state.keywords_classified = True



# ### REMPLACER L'ANCIENNE FONCTION PAR CELLE-CI ###

def start_segmentation():
    # R√©initialiser les r√©sultats pr√©c√©dents avant de commencer
    st.session_state.segmented_results = {}
    seg_folder = "seg"
    os.makedirs(seg_folder, exist_ok=True)
    clear_folder(seg_folder) # Optionnel : vider les anciens r√©sultats

    # V√©rifier que toutes les conditions sont remplies
    if not st.session_state.get('saved_images_paths'):
        st.error("Veuillez d'abord importer au moins une image.")
        return
    if not st.session_state.get('selected_for_segmentation'):
        st.error("Veuillez s√©lectionner au moins un objet pour la segmentation.")
        return

    images_to_process = st.session_state.saved_images_paths
    total_images = len(images_to_process)
    progress_bar = st.progress(0)
    
    # Message global pour l'ensemble du processus
    status_text = st.empty()
    status_text.info(f"üß† D√©marrage de la segmentation pour {total_images} image(s)...")

    try:
        sam_checkpoint_path = "sam_vit_h_4b8939.pth"
        
        # Boucler sur chaque image import√©e
        for i, image_path in enumerate(images_to_process):
            image_filename = os.path.basename(image_path)
            
            # Mettre √† jour le statut pour l'image en cours
            status_text.info(f"üß† Traitement de l'image {i+1}/{total_images} : '{image_filename}'...")

            result_image = highlight_objects_in_image(
                img_path=image_path,
                keywords=st.session_state.selected_for_segmentation,
                sam_checkpoint_path=sam_checkpoint_path,
                show=False,
                threshold=0.1
            )

            if result_image is not None:
                if not isinstance(result_image, Image.Image):
                    result_image = Image.fromarray(result_image)

                # Sauvegarder l'image segment√©e dans le dossier 'seg'
                output_path = os.path.join(seg_folder, f"segmented_{image_filename}")
                result_image.save(output_path)
                
                # Stocker le chemin du r√©sultat dans le dictionnaire
                st.session_state.segmented_results[image_path] = output_path
            else:
                # Si aucun objet n'est trouv√©, on stocke None pour le savoir
                st.session_state.segmented_results[image_path] = None
                st.warning(f"Aucun objet d√©tect√© pour l'image '{image_filename}'.")
            
            # Mettre √† jour la barre de progression
            progress_bar.progress((i + 1) / total_images)

        status_text.success(f"‚úÖ Segmentation termin√©e pour les {total_images} images !")
        st.session_state.segmentation_completed = True

    except FileNotFoundError as fnf_error:
        status_text.error(f"Erreur de fichier : {fnf_error}. Assurez-vous que le checkpoint SAM est pr√©sent.")
    except Exception as e:
        status_text.error(f"Une erreur est survenue durant la segmentation : {e}")
        import traceback
        st.code(traceback.format_exc())


# --- AJOUTER CES FONCTIONS √Ä VOTRE SCRIPT ---

# Note : vous avez d√©j√† normalize_coordinates et create_yolo_label,
# donc nous ajoutons les nouvelles fonctions n√©cessaires.

def draw_bounding_boxes_on_image(image, bboxes_info, colors=None):
    """Dessine les bo√Ætes englobantes sur une copie de l'image."""
    img_copy = image.copy()
    draw = ImageDraw.Draw(img_copy)
    
    if colors is None:
        colors = ['#FF4136', '#3D9970', '#0074D9', '#FFDC00', '#B10DC9', '#FF851B']
    
    try:
        font = ImageFont.truetype("arial.ttf", 20)
    except IOError:
        font = ImageFont.load_default()
        
    for i, info in enumerate(bboxes_info):
        bbox = info['bbox']
        class_name = info['class']
        color = colors[i % len(colors)]
        
        draw.rectangle(bbox, outline=color, width=3)
        text = f"{i+1}: {class_name}"
        text_bbox = draw.textbbox((bbox[0], bbox[1]), text, font=font)
        # S'assurer que le fond du texte ne sort pas de l'image en haut
        text_y = bbox[1] if bbox[1] > text_bbox[3] - text_bbox[1] else bbox[1] + (text_bbox[3] - text_bbox[1])
        draw.rectangle((bbox[0], text_y - (text_bbox[3] - text_bbox[1]), bbox[0] + (text_bbox[2] - text_bbox[0]), text_y), fill=color)
        draw.text((bbox[0], text_y - (text_bbox[3] - text_bbox[1])), text, fill='white', font=font)
        
    return img_copy

def generate_finetuning_dataset():
    """Cr√©e les dossiers et fichiers pour le dataset de fine-tuning dans 'data_fin'."""
    output_dir = "data_fin"
    images_dir = os.path.join(output_dir, "images")
    labels_dir = os.path.join(output_dir, "labels")

    # Nettoyer et recr√©er les dossiers de destination pour un r√©sultat propre
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)
    os.makedirs(images_dir, exist_ok=True)
    os.makedirs(labels_dir, exist_ok=True)

    # R√©initialiser le mapping des classes pour qu'il soit propre √† cette g√©n√©ration
    st.session_state.finetuning_class_mapping = {}
    
    # Parcourir uniquement les images qui ont des labels
    for img_path, labels_for_image in st.session_state.finetuning_all_labels.items():
        if not labels_for_image:
            continue # Ne pas inclure les images non labellis√©es

        base_filename = os.path.basename(img_path)
        filename_no_ext = os.path.splitext(base_filename)[0]

        # 1. Copier l'image dans data_fin/images
        shutil.copy(img_path, os.path.join(images_dir, base_filename))

        # 2. Cr√©er le fichier .txt de labels dans data_fin/labels
        img = Image.open(img_path)
        img_width, img_height = img.size
        
        yolo_label_strings = [
            create_yolo_label(
                label_info['class'],
                label_info['bbox'],
                img_width,
                img_height,
                st.session_state.finetuning_class_mapping
            ) for label_info in labels_for_image
        ]
        
        label_filepath = os.path.join(labels_dir, f"{filename_no_ext}.txt")
        with open(label_filepath, 'w') as f:
            f.write("\n".join(yolo_label_strings))

    # 3. Cr√©er le fichier data.yaml, standard pour YOLO
    yaml_path = os.path.join(output_dir, "data.yaml")
    class_names = list(st.session_state.finetuning_class_mapping.keys())
    
    with open(yaml_path, 'w') as f:
        f.write(f"train: ../{images_dir}\n")
        f.write(f"val: ../{images_dir}\n\n")
        f.write(f"nc: {len(class_names)}\n")
        f.write(f"names: {class_names}\n")

    st.session_state.dataset_generated = True
    st.success(f"Dataset g√©n√©r√© avec succ√®s dans le dossier '{output_dir}' !")


def create_yolo_label(class_name, bbox, img_width, img_height, class_mapping):
    """
    Cr√©e une cha√Æne de caract√®res de label au format YOLO √† partir des informations d'une bo√Æte.

    Args:
        class_name (str): Le nom de la classe de l'objet (ex: 'person').
        bbox (list): Les coordonn√©es [x1, y1, x2, y2] de la bo√Æte.
        img_width (int): La largeur totale de l'image.
        img_height (int): La hauteur totale de l'image.
        class_mapping (dict): Un dictionnaire qui mappe les noms de classe √† des ID num√©riques.
                              S'il est mis √† jour, la modification est conserv√©e.

    Returns:
        str: Le label au format YOLO "class_id x_center y_center width height".
    """
    # 1. Obtenir l'ID de la classe. Si la classe est nouvelle, l'ajouter au mapping.
    if class_name not in class_mapping:
        # L'ID sera la taille actuelle du dictionnaire (0, puis 1, etc.)
        new_id = len(class_mapping)
        class_mapping[class_name] = new_id
    class_id = class_mapping[class_name]

    # 2. Extraire les coordonn√©es de la bo√Æte
    x1, y1, x2, y2 = bbox

    # 3. Calculer les dimensions et le centre de la bo√Æte en pixels
    box_width = float(x2 - x1)
    box_height = float(y2 - y1)
    x_center = float(x1 + box_width / 2)
    y_center = float(y1 + box_height / 2)

    # 4. Normaliser toutes les valeurs par rapport aux dimensions de l'image (pour qu'elles soient entre 0 et 1)
    norm_x_center = x_center / img_width
    norm_y_center = y_center / img_height
    norm_width = box_width / img_width
    norm_height = box_height / img_height

    # 5. Formater la cha√Æne de caract√®res finale
    return f"{class_id} {norm_x_center:.6f} {norm_y_center:.6f} {norm_width:.6f} {norm_height:.6f}"


# Fonctions associ√©es aux boutons

def fine_tuning():
    st.warning("La fonctionnalit√© de Fine-Tuning est en cours de d√©veloppement.")
    if not st.session_state.get('selected_for_finetuning'):
        st.error("Veuillez d'abord s√©lectionner des objets pour le Fine-Tuning.")
# ### AJOUTER CETTE NOUVELLE FONCTION ###
def clear_folder(folder_path):
    """Supprime tout le contenu d'un dossier et le recr√©e."""
    if os.path.exists(folder_path):
        shutil.rmtree(folder_path)
    os.makedirs(folder_path)

def zip_folder_to_bytes(folder_path):
    """Compresse un dossier en un fichier ZIP en m√©moire et retourne les bytes."""
    zip_buffer = io.BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # os.walk parcourt tous les fichiers et sous-dossiers
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                # Cr√©e le chemin complet du fichier
                file_path = os.path.join(root, file)
                # Cr√©e le nom du fichier dans l'archive (sans le chemin du dossier parent)
                archive_name = os.path.relpath(file_path, folder_path)
                zipf.write(file_path, arcname=archive_name)
                
    # Se positionne au d√©but du buffer avant de le lire
    zip_buffer.seek(0)
    return zip_buffer.getvalue()


# ----------- STREAMLIT UI --------------



st.markdown("""
    <style>
        /* Couleur de fond de la sidebar */
        section[data-testid="stSidebar"] {
            background-color: #FFEB99 !important;  /* gris clair */
        }
        /* Style des boutons dans la sidebar */
        section[data-testid="stSidebar"] button {
            background-color: #90EE90 !important; /* bleu clair */
            color: black !important;
            border: none !important;
            border-radius: 5px !important;
            padding: 0.5em 1em !important;
            font-weight: bold;
        }
    </style>
""", unsafe_allow_html=True)
# Charger l'image
image = Image.open("SEG.png")

# Afficher l'image
st.image(image,width=700)

# Title of the app
st.title("SegmaVision Pro Light")

# Sidebar buttons to display different sections
st.sidebar.button("√Ä propos", on_click=show_about,type="primary")
# Mise en √©vidence du bouton de retour pour nouvelle prompt
st.sidebar.button("Your Prompt", on_click=show_prompt, help="Cliquez ici pour entrer une nouvelle prompt",type="primary")
st.sidebar.button("Enhancer/Extraction", on_click=show_enhancer,type="primary") # MODIFI√â ICI: Bouton Enhancer/Extraction dans la barre lat√©rale


# Bouton pour afficher/cacher le file_uploader
if st.sidebar.button("Importer des donn√©es", key="import_data"):
    # 1. Vider le dossier et r√©initialiser les √©tats
    clear_folder("images_input")
    st.session_state.saved_images_paths = []
    st.session_state.segmented_results = {} 
    st.session_state.active_image_index = 0
    # Afficher l'uploader
    st.session_state.segmentation_completed = False
    st.session_state.show_upload = True
    

if st.session_state.get("show_upload", False):
    uploaded_files = st.sidebar.file_uploader(
        "Choisissez une ou plusieurs images",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True
    )

    if uploaded_files:
        input_folder = "images_input"
        saved_paths = []
        
        # 2. Enregistrer les nouvelles images
        for uploaded_file in uploaded_files:
            image_path = os.path.join(input_folder, uploaded_file.name)
            with open(image_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            saved_paths.append(image_path)
        
        st.session_state.saved_images_paths = saved_paths
        st.session_state.show_upload = False
        
        st.sidebar.success(f"{len(uploaded_files)} image(s) import√©e(s) !")
        st.rerun()

# ### AJOUTER CE BLOC POUR AFFICHER LES IMAGES SUR LA PAGE PRINCIPALE ###
# ### AJOUTER CE BLOC POUR AFFICHER LES IMAGES SUR LA PAGE PRINCIPALE ###
if st.session_state.saved_images_paths:
    st.markdown("---")
    st.subheader("üñºÔ∏è Images √† traiter")

    # S'il y a plusieurs images, afficher un s√©lecteur
    if len(st.session_state.saved_images_paths) > 1:
        filenames = [os.path.basename(p) for p in st.session_state.saved_images_paths]
        selected_filename = st.selectbox(
            "S√©lectionnez une image √† analyser :",
            filenames,
            index=st.session_state.active_image_index
        )
        st.session_state.active_image_index = filenames.index(selected_filename)

    # Afficher l'image active et son r√©sultat de segmentation si disponible
    active_path = st.session_state.saved_images_paths[st.session_state.active_image_index]
    
    col1, col2 = st.columns(2)
    with col1:
        st.image(active_path, caption="Image originale", use_container_width=True) # MODIFI√â ICI
    with col2:
        # ### MODIFI√â ### : Logique pour chercher le r√©sultat dans le dictionnaire
        # On v√©rifie si un r√©sultat existe pour l'image active
        if active_path in st.session_state.segmented_results:
            segmented_image_path = st.session_state.segmented_results[active_path]
            
            # On v√©rifie si la segmentation a r√©ussi pour cette image
            if segmented_image_path is not None:
                st.image(segmented_image_path, caption="R√©sultat de la segmentation", use_container_width=True)
            else:
                st.warning("Aucun objet n'a √©t√© d√©tect√© sur cette image lors du traitement.")
        else:
            st.info("Le r√©sultat de la segmentation appara√Ætra ici une fois le traitement lanc√©.")
    st.markdown("---")




# Afficher le contenu en fonction de l'√©tat actuel
if st.session_state.current_view == 'about':
    # Platform definition
    st.subheader("Qu'est-ce que SegmaVision Pro Light ?")
    st.write("""
Bienvenue sur Segma Vision Pro Light, une plateforme puissante d√©di√©e √† la segmentation et √† la labellisation automatique des images.
""")
    st.write("""
Con√ßue pour offrir pr√©cision, rapidit√© et √©volutivit√©, Segma Vision Pro Light s‚Äôadapte √† de nombreux domaines d‚Äôapplication tels que la vision par ordinateur, l'entra√Ænement de mod√®les d‚Äôintelligence artificielle, et bien plus encore.
""")
    st.write("""
Cette solution innovante a √©t√© d√©velopp√©e par BOURKIBA Salma et BOUTARHAT Alae, √©l√®ves ing√©nieurs en G√©nie Industriel, option Intelligence Artificielle et Data Science.
   
""")
    st.write("""
Vous trouverez ci-dessous un guide expliquant comment utiliser notre plateforme.
""")


    st.write("""
    1. Cliquez sur le bouton "Your Prompt" et saisissez une description : indiquez ce que vous souhaitez segmenter ou labelliser.
    2. Vous devez choisir ce que vous souhaitez, puis d√©cider si vous souhaitez continuer avec votre instruction telle quelle ‚Äî si vous √™tes convaincu qu‚Äôelle est claire et correcte ‚Äî ou bien l‚Äôam√©liorer davantage afin d‚Äôen augmenter la pr√©cision. 
    3. Si vous choisissez d'am√©liorer davantage votre instruction, vous devez cliquer sur le bouton "Enhancer" situ√© √† gauche, afin de g√©n√©rer des versions correctes et claires de votre instruction.
    3. S√©lection de la meilleure prompt : Choisissez la description qui correspond le mieux √† vos besoins parmi plusieurs options propos√©es.
    4. Cliquez sur le bouton "Extraction des mots-cl√©s" en bas.Extraction des mots-cl√©s : Le syst√®me extrait automatiquement les objets √† segmenter √† partir de votre description.
    5. D√©marrer le processus d'extraction des objets : Une fois les mots-cl√©s identifi√©s, lancez le processus.
    6. D√©marrer le processus de la segmentation : Lancement de l'algorithme de segmentation.
    7. Validation des r√©sultats : V√©rifiez si les objets segment√©s sont corrects. Si n√©cessaire, ajustez les param√®tres.
    """)

    st.subheader("""
    Contactez-nous:
""")


    st.write("""
üìç Location: Meknes, Morocco  
üìß Email: segmavision.team@gmail.com   
üîó LinkedIn: linkedin.com/in/salma-bourkiba
             linkedin.com/in/alae-boutarhat
    """)



elif st.session_state.current_view == 'enhancer':
    st.subheader("üß† Am√©lioration de prompt")

    st.write("Prompt initiale :")
    st.write(f"{st.session_state.user_prompt}")

    if st.session_state.enhanced_prompts:
        st.success(f"‚úÖ Reformulations g√©n√©r√©es en {st.session_state.enhance_time} sec")
        st.info("Veuillez s√©lectionner une reformulation qui correspond le mieux √† votre besoin :")

        # Utilisation de radio buttons pour la s√©lection d'une seule option
        options = []
        for i, (english_text, french_text, score) in enumerate(st.session_state.enhanced_prompts):
            options.append(f"{i+1}. {english_text}\n\nüá´üá∑ : {french_text}")

        selected_option = st.radio(
            "Choisissez une reformulation :",
            options,
            index=st.session_state.selected_prompt_index if st.session_state.selected_prompt_index >= 0 else 0
        )

        # Mettre √† jour l'index s√©lectionn√©
        selected_index = options.index(selected_option)
        select_enhanced_prompt(selected_index)

        # Afficher les d√©tails de la reformulation s√©lectionn√©e
        if st.session_state.selected_prompt_index >= 0:
            english_text, french_text, score = st.session_state.enhanced_prompts[st.session_state.selected_prompt_index]

            st.write("### Reformulation s√©lectionn√©e :")
            st.write(f"*Original (EN)* : {english_text}")
            st.write(f"*Traduction (FR)* : {french_text}")

            # Bouton pour confirmer la s√©lection
            col1, col2 = st.columns(2)

            with col1:
                if st.button("Utiliser cette reformulation", type="primary"):
                    confirm_selection()

        # Option pour revenir √† la prompt initiale
        if st.button("Revenir √† ma prompt initiale",type="primary"):
            st.session_state.current_view = 'prompt'

        # Option pour revenir au d√©part avec un message plus explicite
        if st.button("Je ne suis pas satisfait, nouvelle prompt", key="new_prompt_enhancer",type="primary"):
            new_prompt()
    else:
        st.warning("‚ö† Aucune reformulation n'a pu √™tre g√©n√©r√©e. Veuillez r√©essayer.")

        # Message plus explicite pour encourager l'utilisateur √† recommencer
        st.error("""
        üòï Les reformulations n'ont pas pu √™tre g√©n√©r√©es. Nous vous recommandons de retourner
        √† l'√©tape de saisie et d'entrer une nouvelle prompt plus d√©taill√©e.
        """)

        # Bouton pour entrer une nouvelle prompt
        if st.button("Entrer une nouvelle prompt", key="new_prompt_no_results"):
            new_prompt()

elif st.session_state.current_view == 'prompt':
    st.subheader("Saisir la description de l'objet √† segmenter ou labelliser")

    # Si la prompt n'est pas encore confirm√©e
    if not st.session_state.prompt_confirmed:
        # Si la prompt n'est pas encore soumise, afficher la zone de texte
        if not st.session_state.prompt_submitted:
            # Utiliser une cl√© unique pour le text_area
            prompt_input = st.text_area(
                "D√©crivez votre besoin ici:",
                value=st.session_state.user_prompt,
                height=150,
                key="prompt_input"
            )

            # Mettre √† jour st.session_state.user_prompt
            if prompt_input != st.session_state.user_prompt:
                st.session_state.user_prompt = prompt_input

            # Create a column layout: input on the left, button on the right
            col1, col2 = st.columns([3, 1])

            with col2:
                # Button to confirm the prompt entry
                st.button("Entr√©e", on_click=submit_prompt)

            # Afficher le message d'erreur si n√©cessaire
            if 'prompt_error' in st.session_state and st.session_state.prompt_error:
                st.error("Veuillez saisir une description avant de cliquer sur 'Entr√©e'.")

        # Si la prompt est soumise mais pas encore confirm√©e
        if st.session_state.prompt_submitted and not st.session_state.prompt_confirmed:
            st.success("Prompt soumise avec succ√®s!")
            st.write("Prompt saisie :")
            st.write(st.session_state.user_prompt)

            # Indiquer si la prompt est en fran√ßais et sera traduite
            if est_en_francais(st.session_state.user_prompt):
                st.info("Votre prompt est en fran√ßais et sera automatiquement traduite en anglais si vous continuez sans am√©lioration.")

            # Demander √† l'utilisateur s'il souhaite continuer avec cette prompt ou l'am√©liorer
            st.write("### Souhaitez-vous continuer avec cette prompt ou l'am√©liorer ?")

            col1, col2 = st.columns(2)
            with col1:
                st.button("Continuer avec cette prompt", on_click=confirm_prompt, type="primary")

                

            # Information pour entrer une nouvelle prompt
            st.info("üí° Si vous souhaitez modifier compl√®tement votre prompt, cliquez sur le bouton ci-dessous pour recommencer.")
            st.info(f"""
                Pour am√©liorer votre prompt, veuillez cliquer sur le bouton 'Enhancer/Extraction' qui se trouve dans la barre lat√©rale gauche.
                """)
            if st.button("Entrer une nouvelle prompt", on_click=new_prompt):
                pass

          

    # Si la prompt est confirm√©e, passer √† l'√©tape suivante
    if st.session_state.prompt_confirmed:
        st.success("Prompt confirm√©e!")

        # Afficher la prompt originale et sa traduction si elle est diff√©rente
        if hasattr(st.session_state, 'user_prompt_original') and st.session_state.user_prompt_original != st.session_state.user_prompt_english:
            st.write("Prompt originale :")
            st.write(f"{st.session_state.user_prompt_original}")
            st.write("Prompt traduite pour le traitement :")
            st.write(f"{st.session_state.user_prompt_english}")
        else:
            st.write("Prompt pour le traitement :")
            st.write(f"{st.session_state.user_prompt_english}")

        # Bouton pour extraire les mots-cl√©s une fois la prompt confirm√©e
        if not st.session_state.keywords_extracted:
            st.info("""
            ‚ö†Ô∏è **Pour extraire les classes √† segmenter ou √† labelliser**, veuillez cliquer sur le bouton
            "Extraire les mots-cl√©s" ci-dessous. 
            """)

            if st.button("Extraire les mots-cl√©s", key="extract_confirmed_prompt"):
                extract_keywords()

        # Afficher les mots-cl√©s extraits si disponibles
        if st.session_state.keywords_extracted:
            st.success(f"‚úÖ Extraction des mots-cl√©s r√©alis√©e en {st.session_state.extraction_time} sec")

            if st.session_state.extracted_keywords:
                st.write("### Objets √† segmenter :")

                # Afficher les mots-cl√©s classifi√©s
                # LE NOUVEAU BLOC DE CODE AVEC S√âLECTION
                # =================== BLOC DE S√âLECTION FINAL ET ROBUSTE ===================
                if st.session_state.keywords_classified:
                    if not any([st.session_state.objets_existants, st.session_state.objets_inexistants, st.session_state.sous_classes]):
                        st.warning("‚ö†Ô∏è Aucun objet √† segmenter n'a √©t√© d√©tect√©. Veuillez essayer une autre prompt.")
                    else:
                        

                        if not st.session_state.selection_confirmed:
                            st.info("Veuillez cocher les objets que vous souhaitez traiter (pour la segmentation ou le fine-tuning).")

                            # Listes temporaires pour capturer l'√©tat actuel des checkboxes
                            current_selection_seg = []
                            current_selection_ft = []

                            col1, col2, col3 = st.columns(3)

                            # --- Colonne 1: Objets Existants (pour Segmentation) ---
                            with col1:
                                st.write("#### ‚úÖ Pour Segmentation")
                                if st.session_state.objets_existants:
                                    for obj in st.session_state.objets_existants:
                                        # La valeur de la checkbox est True si l'objet est d√©j√† dans la liste de s√©lection
                                        is_checked = st.checkbox(
                                            obj, 
                                            key=f"cb_seg_{obj}",
                                            value=(obj in st.session_state.selected_for_segmentation)
                                        )
                                        if is_checked:
                                            current_selection_seg.append(obj)
                                else:
                                    st.write("Aucun")
                            
                            # Mettre √† jour la liste principale avec la s√©lection actuelle
                            st.session_state.selected_for_segmentation = current_selection_seg

                            # --- Colonne 2 & 3 : Objets pour Fine-Tuning ---
                            with col2:
                                st.write("#### üîß Pour Fine-Tuning")
                                if st.session_state.objets_inexistants:
                                    st.write("**Nouveaux Objets :**")
                                    for obj in st.session_state.objets_inexistants:
                                        is_checked = st.checkbox(
                                            obj, 
                                            key=f"cb_ft_inex_{obj}",
                                            value=(obj in st.session_state.selected_for_finetuning)
                                        )
                                        if is_checked:
                                            current_selection_ft.append(obj)
                                else:
                                    st.write("_Aucun nouvel objet_")

                            with col3:
                                st.write("#### ¬†") # Espace pour aligner le titre
                                if st.session_state.sous_classes:
                                    st.write("**Nouvelles Sous-Classes :**")
                                    for obj in st.session_state.sous_classes:
                                        is_checked = st.checkbox(
                                            obj, 
                                            key=f"cb_ft_sous_{obj}",
                                            value=(obj in st.session_state.selected_for_finetuning)
                                        )
                                        if is_checked:
                                            # V√©rifier que l'on n'ajoute pas de doublons si un objet est dans les deux listes
                                            if obj not in current_selection_ft:
                                                current_selection_ft.append(obj)
                                else:
                                    st.write("_Aucune nouvelle sous-classe_")
                            
                            # Mettre √† jour la liste principale avec la s√©lection actuelle
                            st.session_state.selected_for_finetuning = current_selection_ft


                            st.markdown("---")

                            # Activer le bouton si au moins une s√©lection a √©t√© faite
                            if st.session_state.selected_for_segmentation or st.session_state.selected_for_finetuning:
                                if st.button("Confirmer la s√©lection", type="primary"):
                                    st.session_state.selection_confirmed = True
                                    st.rerun()
                            else:
                                st.warning("Veuillez s√©lectionner au moins un objet pour continuer.")

                        # --- Affichage apr√®s confirmation (pas de changement ici) ---
                        if st.session_state.selection_confirmed:
                            st.success("S√©lection confirm√©e !")
                            
                            
                            if st.session_state.selected_for_segmentation:
                                st.markdown("#### Objets pr√™ts pour la **Segmentation** :")
                                for obj in st.session_state.selected_for_segmentation:
                                    st.markdown(f"- ‚úÖ **{obj}**")
                                
                            
                            if st.session_state.selected_for_finetuning:
                                st.markdown("#### Objets n√©cessitant un **Fine-Tuning** :")
                                for obj in st.session_state.selected_for_finetuning:
                                    st.markdown(f"- üîß **{obj}**")
                                

                            if not st.session_state.selected_for_segmentation and not st.session_state.selected_for_finetuning:
                                st.warning("Aucun objet n'a √©t√© s√©lectionn√©. Veuillez recommencer le processus.")



                                 

                st.info("""     

Bravo, vous √™tes arriv√© √† ce stade ! Voici maintenant comment cela fonctionne :

Il existe g√©n√©ralement trois types de sorties de classes :

Les classes existantes : Ce sont les classes que l‚Äôon conna√Æt d√©j√†. On peut donc segmenter automatiquement les donn√©es qui leur sont associ√©es.
üëâ Pour cela, cliquez sur le bouton "D√©marrer la segmentation".

Les classes inexistantes : Ce sont des classes inconnues du syst√®me. Elles ne peuvent pas √™tre segment√©es automatiquement. Il est donc n√©cessaire d‚Äôajouter de nouvelles donn√©es et de les annoter manuellement pour que le mod√®le puisse les apprendre. Une fois cela fait, elles pourront √™tre segment√©es comme les autres.
üëâ Pour cela, cliquez sur le bouton "Fine Tuning".

Les sous-classes : Ici, seules les classes g√©n√©rales sont connues, sans distinction pr√©cise des sous-cat√©gories. Il faut donc ajouter des donn√©es suppl√©mentaires afin que le mod√®le puisse apprendre √† les diff√©rencier.
üëâ L√† aussi, cliquez sur le bouton "Fine Tuning".



                """)
            else:
                st.warning("‚ö†Ô∏è Aucun objet √† segmenter n'a √©t√© d√©tect√©. Veuillez essayer une autre prompt.")





elif st.session_state.current_view == 'finetuning':
    st.header("üõ†Ô∏è Interface de Labellisation pour le Fine-Tuning")
    st.markdown("Pour les classes nouvelles ou √† pr√©ciser, veuillez dessiner des bo√Ætes englobantes en entrant leurs coordonn√©es.")

    if not st.session_state.saved_images_paths:
        st.error("Aucune image √† labelliser. Veuillez retourner importer des donn√©es via la barre lat√©rale.")
    else:
        col_main, col_sidebar = st.columns([2, 1])

        # --- COLONNE DE DROITE : LES CONTR√îLES ---
        with col_sidebar:
            st.subheader("‚öôÔ∏è Panneau de Contr√¥le")

            # 1. S√©lectionner l'image active
            # (V√©rifier si finetuning_active_image_path est initialis√©)
            if st.session_state.finetuning_active_image_path is None:
                 st.session_state.finetuning_active_image_path = st.session_state.saved_images_paths[0]
            
            image_filenames = [os.path.basename(p) for p in st.session_state.saved_images_paths]
            selected_filename = st.selectbox(
                "1. Choisissez une image √† annoter :",
                image_filenames,
                index=image_filenames.index(os.path.basename(st.session_state.finetuning_active_image_path))
            )
            st.session_state.finetuning_active_image_path = st.session_state.saved_images_paths[image_filenames.index(selected_filename)]
            
            active_image_path = st.session_state.finetuning_active_image_path
            image_to_label = Image.open(active_image_path)
            img_width, img_height = image_to_label.size
            st.info(f"Dimensions de l'image : {img_width}x{img_height} pixels")

            # 2. Saisir une nouvelle bo√Æte
            with st.form("new_bbox_form", clear_on_submit=True):
                st.markdown("**2. Ajoutez une nouvelle bo√Æte :**")
                
                selected_class = st.selectbox(
                    "Classe de l'objet :",
                    st.session_state.selected_for_finetuning
                )
                
                c1, c2 = st.columns(2)
                x1 = c1.number_input("X1 (gauche)", min_value=0, max_value=img_width, step=10, key="x1")
                y1 = c1.number_input("Y1 (haut)", min_value=0, max_value=img_height, step=10, key="y1")
                x2 = c2.number_input("X2 (droite)", min_value=0, max_value=img_width, step=10, key="x2")
                y2 = c2.number_input("Y2 (bas)", min_value=0, max_value=img_height, step=10, key="y2")
                
                submitted = st.form_submit_button("‚ûï Ajouter cette bo√Æte", type="primary")

                if submitted:
                    if selected_class and x2 > x1 and y2 > y1:
                        new_label = {'class': selected_class, 'bbox': [int(x1), int(y1), int(x2), int(y2)]}
                        if active_image_path not in st.session_state.finetuning_all_labels:
                            st.session_state.finetuning_all_labels[active_image_path] = []
                        st.session_state.finetuning_all_labels[active_image_path].append(new_label)
                        st.success(f"Bo√Æte ajout√©e pour '{selected_class}' !")
                        st.rerun()
                    else:
                        st.error("Coordonn√©es invalides (X2 doit √™tre > X1 et Y2 > Y1).")

            # 3. G√©rer les labels existants
            st.markdown("**Labels sur cette image :**")
            labels_on_current_image = st.session_state.finetuning_all_labels.get(active_image_path, [])
            if labels_on_current_image:
                for i, label in enumerate(labels_on_current_image):
                    st.text(f"  {i+1}. {label['class']} : {label['bbox']}")
                if st.button("üóëÔ∏è Supprimer le dernier label", use_container_width=True):
                    st.session_state.finetuning_all_labels[active_image_path].pop()
                    st.rerun()
            else:
                st.write("_Aucun label pour le moment._")

            # 4. Finaliser
            st.subheader("üéØ Finalisation")
            if st.button("‚úÖ Terminer et G√©n√©rer le Dataset", use_container_width=True):
                with st.spinner("Cr√©ation du dataset dans le dossier 'data_fin'..."):
                    generate_finetuning_dataset()
                st.rerun()

            if st.session_state.dataset_generated:
                st.info("Le dataset a √©t√© g√©n√©r√© localement dans le dossier `data_fin`.")
                try:
                    zip_data = zip_folder_to_bytes("data_fin")
                    st.download_button(
                        label="üì• T√©l√©charger le Dataset (ZIP)",
                        data=zip_data,
                        file_name="finetuning_dataset.zip",
                        mime="application/zip",
                        use_container_width=True
                    )
                except Exception as e:
                    st.error(f"Erreur lors de la cr√©ation du ZIP: {e}")

        # --- COLONNE DE GAUCHE : LA VISUALISATION ---
        with col_main:
            st.subheader("üñºÔ∏è Visualisation de l'Annotation")
            labels_to_draw = st.session_state.finetuning_all_labels.get(active_image_path, [])
            
            if labels_to_draw:
                img_with_boxes = draw_bounding_boxes_on_image(image_to_label, labels_to_draw)
                st.image(img_with_boxes, use_container_width=True, caption="Image avec les bo√Ætes labellis√©es")
            else:
                st.image(image_to_label, use_container_width=True, caption="Image originale - Pr√™te pour l'annotation")
# ---- FIN DU BLOC AJOUT√â ----



# ‚ûï Bouton pour d√©marrer la segmentation si les conditions sont remplies
if st.sidebar.button("D√©marrer la segmentation", key="start_segmentation_sidebar"):
    if not st.session_state.get('saved_images_paths'):
        st.sidebar.warning("Veuillez d'abord importer une image.")
    elif not st.session_state.get('selected_for_segmentation'):
        st.sidebar.warning("Veuillez s√©lectionner au moins un objet √† segmenter.")
    else:
        start_segmentation()


# ... apr√®s le bloc if st.sidebar.button("D√©marrer la segmentation" ...

# ‚ûï Bouton pour t√©l√©charger les r√©sultats si la segmentation est termin√©e
if st.session_state.get("segmentation_completed", False):
    st.sidebar.markdown("---")
    st.sidebar.subheader("T√©l√©charger les r√©sultats")

    # Compresser le dossier 'seg' en bytes
    try:
        zip_data = zip_folder_to_bytes("seg")
        st.sidebar.download_button(
            label="üì• T√©l√©charger seg.zip",
            data=zip_data,
            file_name="seg.zip",
            mime="application/zip",
            type="primary",
            help="Cliquez pour t√©l√©charger toutes les images segment√©es dans un fichier ZIP."
        )
    except Exception as e:
        st.sidebar.error(f"Erreur lors de la cr√©ation du ZIP: {e}")




# --- AJOUTER CE BLOC DANS LA SIDEBAR (apr√®s le bouton Segmentation) ---


# Ce bouton est conditionnel : il n'est utile que si des objets sont s√©lectionn√©s pour le fine-tuning
if st.session_state.get('selected_for_finetuning'):
    if st.sidebar.button("üõ†Ô∏è D√©marrer le Fine-Tuning", key="start_finetuning_sidebar", type="primary"):
        if not st.session_state.get('saved_images_paths'):
            st.sidebar.warning("Veuillez d'abord importer des images.")
        else:
            # Pr√©parer l'√©tat pour la vue de fine-tuning
            st.session_state.finetuning_all_labels = {path: [] for path in st.session_state.saved_images_paths}
            st.session_state.finetuning_active_image_path = st.session_state.saved_images_paths[0]
            st.session_state.dataset_generated = False
            st.session_state.current_view = 'finetuning' # Changer de vue
            st.rerun()
















